// Code generated by go-enum
// DO NOT EDIT!

package main

import (
	"fmt"
	"strings"
)

const (
	// Skipped value
	// invalid default int value
	_ Platform = iota
	// PlatformApple is a Platform of type Apple
	PlatformApple
	// PlatformAndroid is a Platform of type Android
	PlatformAndroid
)

const _PlatformName = "appleandroid"

var _PlatformNames = []string{
	_PlatformName[0:5],
	_PlatformName[5:12],
}

// PlatformNames returns a list of possible string values of Platform.
func PlatformNames() []string {
	tmp := make([]string, len(_PlatformNames))
	copy(tmp, _PlatformNames)
	return tmp
}

var _PlatformMap = map[Platform]string{
	1: _PlatformName[0:5],
	2: _PlatformName[5:12],
}

// String implements the Stringer interface.
func (x Platform) String() string {
	if str, ok := _PlatformMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Platform(%d)", x)
}

var _PlatformValue = map[string]Platform{
	_PlatformName[0:5]:  1,
	_PlatformName[5:12]: 2,
}

// ParsePlatform attempts to convert a string to a Platform
func ParsePlatform(name string) (Platform, error) {
	if x, ok := _PlatformValue[name]; ok {
		return x, nil
	}
	return Platform(0), fmt.Errorf("%s is not a valid Platform, try [%s]", name, strings.Join(_PlatformNames, ", "))
}

const (
	// Skipped value
	// invalid default int value
	_ Status = iota
	// StatusActive is a Status of type Active
	StatusActive
	// StatusInactive is a Status of type Inactive
	StatusInactive
)

const _StatusName = "activeinactive"

var _StatusNames = []string{
	_StatusName[0:6],
	_StatusName[6:14],
}

// StatusNames returns a list of possible string values of Status.
func StatusNames() []string {
	tmp := make([]string, len(_StatusNames))
	copy(tmp, _StatusNames)
	return tmp
}

var _StatusMap = map[Status]string{
	1: _StatusName[0:6],
	2: _StatusName[6:14],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _StatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

var _StatusValue = map[string]Status{
	_StatusName[0:6]:  1,
	_StatusName[6:14]: 2,
}

// ParseStatus attempts to convert a string to a Status
func ParseStatus(name string) (Status, error) {
	if x, ok := _StatusValue[name]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is not a valid Status, try [%s]", name, strings.Join(_StatusNames, ", "))
}
